Aggregation - Aggregation is a way of processing in which the data is passed through different stages. The different stages are give below -

$match stage – filters those documents we need to work with, those that fit our needs
$group stage – does the aggregation job
$sort  stage – sorts the resulting documents the way we require (ascending or descending)



db.universities.insert([
{
  country : 'Spain',
  city : 'Salamanca',
  name : 'USAL',
  location : {
    type : 'Point',
    coordinates : [ -5.6722512,17, 40.9607792 ]
  },
  students : [
    { year : 2014, number : 24774 },
    { year : 2015, number : 23166 },
    { year : 2016, number : 21913 },
    { year : 2017, number : 21715 }
  ]
},
{
  country : 'Spain',
  city : 'Salamanca',
  name : 'UPSA',
  location : {
    type : 'Point',
    coordinates : [ -5.6691191,17, 40.9631732 ]
  },
  students : [
    { year : 2014, number : 4788 },
    { year : 2015, number : 4821 },
    { year : 2016, number : 6550 },
    { year : 2017, number : 6125 }
  ]
}
])

db.universities.aggregate([
  { $match : { country : 'Spain', city : 'Salamanca' } }
]).pretty()

$match - nearly works same as find, the only difference is you can make use of $match within aggregate.

db.universities.aggregate([
  { $project : { _id : 0, country : 1, city : 1, name : 1 } }
]).pretty()

_id needs to be ignored explicitly. All other fields are ignored by default.

db.universities.aggregate([
  { $group : { _id : '$name', totaldocs : { $sum : 1 } } }
]).pretty()



$count  Calculates the quantity of documents in the given group.
$max	Displays the maximum value of a document’s field in the collection.
$min	Displays the minimum value of a document’s field in the collection.
$avg	Displays the average value of a document’s field in the collection.
$sum	Sums up the specified values of all documents in the collection.
$push	Adds extra values into the array of the resulting document.

db.universities.aggregate([
  { $group : { _id : '$name', totaldocs : { $sum : 1 } } },
  { $out : 'aggResults' }
])
db.aggResults.find().pretty()

$out - is used to store the result of earlier query into a new collection. In the above example, aggResults is the new collection created with the help of 
$out operator.

$unwind - this allows us to work on array field.

db.universities.aggregate([
  { $match : { name : 'USAL' } },
  { $unwind : '$students' }
]).pretty()


db.universities.aggregate([
  { $match : { name : 'USAL' } },
  { $unwind : '$students' },
  { $project : { _id : 0, 'students.year' : 1, 'students.number' : 1 } },
  { $sort : { 'students.number' : -1 } }
]).pretty()

$addFields - this is used to add a new field(key-value pair) to the documents. this will just add in the result, not in the original record.

db.universities.aggregate([
  { $match : { name : 'USAL' } },
  { $addFields : { foundation_year : 1218 } }
]).pretty()

db.universities.aggregate([
  { $unwind : '$students' },
  { $count : 'total_documents' }
]).pretty()



download link of import tools - https://www.mongodb.com/try/download/database-tools?tck=docs_databasetools

mongoimport is a command tool which is used to import a JSON file directly into a collection. It creates a collection if collection is not present.

mongoimport -d college -c books --file books.json  : this basically means import into database college, a collection called books from a file called books.json

Questions-
1) list all the titles of the book
2) find the sum of page count
3) get categories and count of book
4) get authors and number of books written by them


1) db.books.find({},{_id:0,title:1})
2) db.books.aggregate({$group: {_id: null, totalpages: {$sum: "$pageCount"}}}) - the above example shows how to add an entire column.
3) db.books.aggregate([
  { $unwind : '$categories' },
  { $group : { _id : '$categories', categorycount : { $sum: 1 } } },
]).pretty()

4) db.books.aggregate([
  { $unwind: '$authors' },
  { $group: {_id: '$authors', bookcount: {$sum: 1}}},
]).pretty()




















